{"version":3,"sources":["Auth.js","Log.js","App.js","serviceWorker.js","index.js"],"names":["Auth","props","state","token","menuStatus","onClick","setState","this","handler","React","Component","Login","handleChange","bind","handleSubmit","name","password","event","target","value","preventDefault","credentials","fetch","method","headers","body","URLSearchParams","json","then","response","data","id","onSubmit","type","onChange","placeholder","Register","email","Log","open_form","length","description","workouts","counter","reqUrl","logs","forEach","val","push","workout","console","log","reqUrl2","date","map","renderLog","App","tokenHandler","logout","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b62861dd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Auth extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.state = ({ token: '', menuStatus: 0}); \n    }\n\n    render() {\n        return (\n\t    <div>\n\t\t<button onClick={()=>this.setState({menuStatus: 0})}>\n\t\t    Login\n\t\t</button>\n\n\t\t<button onClick={()=>this.setState({menuStatus: 1})}>\n\t\t    Register\n\t\t</button>\n\n\t\t{ this.state.menuStatus === 0 ? \n\t\t    <Login handler={this.props.handler} /> : \n                    < Register handler={this.props.handler} /> }\n            </div>\n\t)\n    }\n}\n\nclass Login extends React.Component {\n    constructor(props) {\n        super(props);\n\tthis.handleChange = this.handleChange.bind(this);\n\tthis.handleSubmit = this.handleSubmit.bind(this);\n\tthis.state = ({name: \"\", password: \"\"});\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name] : event.target.value });\n    }\n\n    handleSubmit(event) {\n\tevent.preventDefault();\n\tconst credentials = { name: this.state.name, \n\t\t                  password: this.state.password };\n        fetch('https://hanoelleb-forme.herokuapp.com/api/auth/login',\n            { \n                method: 'POST',\n\t\theaders: {'Content-Type': 'application/x-www-form-urlencoded'},\n                body: new URLSearchParams(credentials),\n                json: true\n            })\n\t     .then( response => response.json())\n\t     .then( data => {\n                 this.props.handler(data.token, data.id);\n\t     });\n    }\n\n    render() {\n        return (\n\t    <form onSubmit={this.handleSubmit}>\n\t\t<input type='text' name='name' onChange={this.handleChange} \n\t\t    placeholder='name' />\n\t\t<input type='password' name='password' \n\t\t    onChange={this.handleChange} placeholder='password' />\n\t\t<input type='submit' value='Login' />\n            </form>\n\t)\n    }\n}\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = ({name: \"\", password: \"\", email: \"\"});\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name] : event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const credentials = { name: this.state.name,\n                                  password: this.state.password,\n\t                          email: this.state.email };\n        fetch('https://hanoelleb-forme.herokuapp.com/api/auth/register',\n            {\n                method: 'POST',\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                body: new URLSearchParams(credentials),\n                json: true\n            })\n             .then( response => response.json())\n             .then( data => {\n                 this.props.handler(data.token, data.id);\n\t     });\n    }\n\n    render() {\n       return (\n         <form onSubmit={this.handleSubmit}>\n             <input type='text' name='name' onChange={this.handleChange} \n\t           placeholder='name' />\n             <input type='email' name='email' onChange={this.handleChange}  \n\t           placeholder='email'/>\n             <input type='password' name='password' \n\t         onChange={this.handleChange} placeholder='password' />\n             <input type='submit' value='Create Account' />\n         </form>\n       )\n    }\n}\n\nexport default Auth;\n","import React from 'react';\n\nclass Log extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = ({open_form: false, \n                          length: 0, \n                          description: '',\n\t                  workouts: [],\n\t\t          counter: 0\n                     });\n    }\n\n    componentDidMount() {\n        const reqUrl = 'https://hanoelleb-forme.herokuapp.com/api/exercises/'\n                    + this.props.id + '/?token=' + this.props.token;\n\n\tfetch(reqUrl,\n             {\n               method: 'GET',\n               json: true\n             })\n             .then( response => response.json() )\n             .then( data => {\n                 const workouts = this.state.workouts;\n\t\t const logs = data.logs;\n                 logs.forEach( (val) => workouts.push(val) );\n\t\t this.setState({workouts: workouts});\n             });\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name] : event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n\tconst workout = { length: this.state.length, \n                            description: this.state.description };\n\tconst reqUrl = 'http://hanoelleb-forme.herokuapp.com/api/exercises/'\n                    + this.props.id + '/create' + '?token=' \n\t\t    + this.props.token;\n        console.log(reqUrl);\n\tconsole.log(workout);\n\n\tfetch(reqUrl,\n             {\n               method: 'POST',\n               headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n               body: new URLSearchParams(workout),\n               json: true\n             })\n             .then( response => { \n\t\t  const reqUrl2 = 'https://hanoelleb-forme.herokuapp.com/api'\n\t\t\t     + '/exercises/' + this.props.id \n\t\t\t     + '/?token=' + this.props.token;\n\n                  return fetch(reqUrl2,\n                  {\n                    method: 'GET',\n                    json: true\n                  })\n                    .then( response => response.json() )\n                    .then( data => {\n                    const workouts = [];\n                    const logs = data.logs;\n                    logs.forEach( (val) => workouts.push(val) );\n                    this.setState({workouts: workouts});\n                  });\n\t     });\n    }\n\n    renderLog(workout) {\n\treturn (\n            <tr>\n\t\t<td>{workout.date}</td>\n\t\t<td>{workout.length}</td>\n\t\t<td>{workout.description}</td>\n            </tr>\n\t)\n    }\n\n    render() {\n        return (\n\t    <div>\n                <h2>Log</h2>\n\t\t<table>\n\t\t<thead>\n\t\t    <tr>\n\t\t        <th>Date</th>\n\t\t        <th>Length</th>\n\t\t        <th>Description</th>\n\t\t    </tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t{ this.state.workouts.map(workout => this.renderLog(workout))}\n\t\t</tbody>\n\t\t</table>\n\n\t\t{ !this.state.open_form ?\n\t\t<button onClick={()=>this.setState({open_form: true})}>\n                    +Workout\n\t\t</button>\n                :\n                <form onSubmit={this.handleSubmit}>\n                    <button onClick={()=>this.setState({open_form: false, length: 0, description: ''})}>\n                        Cancel\n                    </button>\n                    <input type='number' name='length' \n\t\t\tonChange={this.handleChange} \n                        placeholder='Length in minutes' />\n\t\t    <textarea name = 'description' \n\t\t\tonChange={this.handleChange} \n                        placeholder='Description (cardio, strength, yoga etc...'></textarea>\n                    <input type='submit' value='Add' />\n\t\t</form>\n\t\t}\n            </div>\n\t)\n    }\n}\n\nexport default Log;\n","import React from 'react';\nimport './App.css';\n\nimport Auth from './Auth';\nimport Log from './Log';\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.tokenHandler = this.tokenHandler.bind(this);\n      this.logout = this.logout.bind(this);\n      this.state = ({ token: '', id: '' });\n  }\n\n  tokenHandler(token, id) {\n      this.setState({ token: token, id: id});\n  }\n\n  logout() {\n      this.setState({ token: '', id: ''});\n  }\n\t\n  render() { \n   return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t  <h2>Forme</h2>\n\t  { this.state.token === '' ? < Auth handler={this.tokenHandler} /> \n            : <div>\n                  <button onClick={this.logout}>Logout</button>\n\t          < Log token={this.state.token} id={this.state.id} /> \n              </div>\n\t  }\n      </header>\n    </div>\n  );}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}